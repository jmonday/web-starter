version: "3.7"

services:
  postgres:
    container_name: jm-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    image: postgres:12.1-alpine
    networks:
      - web
    ports:
      - 7531:5432
    restart: unless-stopped
    volumes:
      - jm_data:/var/lib/postgresql/data

  redis:
    build: ./redis
    container_name: jm-redis
    networks:
      - web
    ports:
      - 6379:6379/tcp
    restart: unless-stopped
    volumes:
      - ./redis/data:/data

  backend:
    build: ./backend
    container_name: jm-backend
    depends_on:
      - postgres
      - redis
    environment:
      APP_ENV: local
      APP_URL: ${BACKEND_URL}
      DB_CONNECTION: pgsql
      DB_HOST: jm-postgres
      DB_PORT: 5432
      DB_DATABASE: ${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      CACHE_DRIVER: redis
      REDIS_HOST: jm-redis
      SANCTUM_STATEFUL_DOMAINS: 'jm-nginx:8000,app.local'
      SESSION_DOMAIN: .app.local
      SESSION_DRIVER: cookie
      QUEUE_CONNECTION: redis
    networks:
      - web
    restart: unless-stopped
    volumes:
      - ./backend:/backend:cached
      - jm_vendor:/backend/vendor/

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # target: dev
    container_name: jm-frontend
    labels:
      - "traefik.docker.network=jm-web"
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`app.local`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=4200"
    networks:
      - web
    ports:
      - 4200:4200
    restart: unless-stopped
    # stdin_open: true
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules

  nginx:
    build: ./nginx
    container_name: jm-nginx
    depends_on:
      - backend
    labels:
      - "traefik.docker.network=jm-web"
      - "traefik.enable=true"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.routers.backend.rule=(Host(`backend.app.local`))"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    networks:
      - web
    ports:
      - 8000:8000
    restart: unless-stopped
    volumes:
      - ./backend:/backend:cached
      - jm_vendor:/backend/vendor/

  traefik:
    command:
      # - "--log.level=DEBUG"
      - "--api.insecure=true" # Enables the web UI and tells Traefik to listen to docker
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    container_name: jm-web
    image: traefik:v2.2
    networks:
      - web
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  web:
    name: jm-web

volumes:
  jm_data: {}
  jm_vendor: {}
